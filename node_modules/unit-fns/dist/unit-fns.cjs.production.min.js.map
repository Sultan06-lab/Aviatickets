{"version":3,"file":"unit-fns.cjs.production.min.js","sources":["../src/core/isUnit.ts","../src/number/mapRange.ts","../src/number/mapTo.ts","../src/number/wrap.ts","../src/core/unitMax.ts","../src/constants.ts","../src/number/radiansToUnit.ts","../src/number/subdivision.ts","../src/number/toIndex.ts","../src/2d/threshold.ts","../src/core/unitMin.ts","../src/2d/distance.ts","../src/2d/maximum.ts","../src/2d/minimum.ts","../src/2d/repeat.ts","../src/3d/mix.ts","../src/2d/angle.ts","../src/1d/bounce.ts","../src/other/branch.ts","../src/1d/center.ts","../src/1d/circular.ts","../src/3d/clamp.ts","../src/number/clip.ts","../src/1d/cosine.ts","../src/other/createNearestLookup.ts","../src/1d/cubic.ts","../src/2d/difference.ts","../src/1d/exponential.ts","../src/other/fit.ts","../src/number/fraction.ts","../src/1d/inverse.ts","../src/1d/linear.ts","../src/number/mapFrom.ts","../src/2d/multiply.ts","../src/2d/offset.ts","../src/2d/peak.ts","../src/1d/quadratic.ts","../src/2d/quantize.ts","../src/1d/quartic.ts","../src/1d/quintic.ts","../src/2d/radial.ts","../src/1d/round.ts","../src/1d/sine.ts","../src/3d/toggle.ts","../src/1d/triangle.ts"],"sourcesContent":["import { Unit } from './Unit'\n\nexport const isUnit = (value: number): value is Unit => {\n  return value >= 0 && value <= 1\n}\n","export const mapRange = <T extends number = number>(\n  inMin: number,\n  inMax: number,\n  outMin: T,\n  outMax: T,\n  value: number\n): T => {\n  return (((value - inMin) * (outMax - outMin)) / (inMax - inMin) + outMin) as T\n}\n","import { Unit } from '../core/Unit'\n\nexport const mapTo = <T extends number = number>(\n  outMin: number,\n  outMax: number,\n  unit: Unit\n): T => {\n  return (outMin * (1 - unit) + outMax * unit) as T\n}\n","import { unitMax } from '../core/unitMax'\nimport { Unit } from '../core/Unit'\nimport { isUnit } from '../core/isUnit'\n\nexport const wrap = (value: number): Unit => {\n  if (isUnit(value)) return value\n\n  if (value % 1 === 0) return 1 as Unit\n\n  return (value < 0 ? unitMax - (-value % unitMax) : value % unitMax) as Unit\n}\n","import { Unit } from './Unit'\n\nexport const unitMax = 1 as Unit\n","export const HALF_PI = Math.PI / 2\nexport const TWO_PI = Math.PI * 2\n","import { Unit } from '../core/Unit'\nimport { wrap } from './wrap'\nimport { HALF_PI } from '../constants'\n\nexport const radiansToUnit = (radians: number): Unit => {\n  return wrap(radians / HALF_PI)\n}\n","import { Unit } from '../core/Unit'\nimport { unitMax } from '../core/unitMax'\n\nexport const subdivision = (value: number): Unit => {\n  return (unitMax / value) as Unit\n}\n","import { Unit } from '../core/Unit'\n\nexport const toIndex = (length: number, unit: Unit): number => {\n  return Math.floor(unit * length)\n}\n","import { unitMax } from '../core/unitMax'\nimport { unitMin } from '../core/unitMin'\nimport { Unit } from 'core/Unit'\n\nexport const threshold = (threshold: Unit, t: Unit): Unit => {\n  return t < threshold ? unitMin : unitMax\n}\n","import { Unit } from './Unit'\n\nexport const unitMin = 0 as Unit\n","import { Unit } from '../core/Unit'\n\nexport const distance = (x: Unit, y: Unit): Unit => {\n  return Math.sqrt(x * x + y * y) / Math.SQRT2\n}\n","import { Unit } from 'core/Unit'\n\nexport const maximum = Math.max as (a: Unit, b: Unit) => Unit\n","import { Unit } from 'core/Unit'\n\nexport const minimum = Math.min as (a: Unit, b: Unit) => Unit\n","import { Unit } from 'core/Unit'\n\nexport const repeat = (scale: Unit, t: Unit): Unit => {\n  const times = 1 / scale\n  return ((t * times) % 1) as Unit\n}\n","import { mapTo } from '../number/mapTo'\nimport { Unit } from 'core/Unit'\n\n// typed alias\nexport const mix = mapTo as (a: Unit, b: Unit, t: Unit) => Unit\n","import { Unit } from '../core/Unit'\nimport { radiansToUnit } from '../number/radiansToUnit'\n\nexport const angle = (x: Unit, y: Unit): Unit => {\n  return radiansToUnit(Math.atan(y / x))\n}\n","import { Unit } from '../core/Unit'\n\nexport const bounce = (unit: Unit): Unit => {\n  const n1 = 7.5625\n  const d1 = 2.75\n\n  if (unit < 1 / d1) {\n    return (n1 * unit * unit) as Unit\n  } else if (unit < 2 / d1) {\n    const a = unit - 1.5 / d1\n    return (n1 * a * a + 0.75) as Unit\n  } else if (unit < 2.5 / d1) {\n    const a = unit - 2.25 / d1\n    return (n1 * a * a + 0.9375) as Unit\n  } else {\n    const a = unit - 2.625 / d1\n    return (n1 * a * a + 0.984375) as Unit\n  }\n}\n","import { Unit } from 'core/Unit'\n\nexport const branch = (\n  a: (unit: Unit) => Unit,\n  b: (unit: Unit) => Unit,\n  unit: Unit\n) => {\n  return unit > 0.5 ? b(unit) : a(unit)\n}\n","import { Unit } from '../'\n\nexport const center = (unit: Unit): Unit => {\n  return Math.abs(unit * 2 - 1)\n}\n","import { Unit } from '../core/Unit'\n\nexport const circular = (unit: Unit): Unit => {\n  return (1 - Math.sqrt(1 - Math.pow(unit, 2))) as Unit\n}\n","import { Unit } from 'core/Unit'\n\nexport const clamp = (min: Unit, max: Unit, val: Unit): Unit => {\n  return val > max ? max : val < min ? min : val\n}\n","import { Unit } from '../core/Unit'\nimport { unitMin } from '../core/unitMin'\nimport { unitMax } from '../core/unitMax'\n\nexport const clip = (value: number): Unit => {\n  return Math.max(unitMin, Math.min(unitMax, value)) as Unit\n}\n","import { Unit } from '../core/Unit'\nimport { HALF_PI } from '../constants'\n\nexport const cosine = (unit: Unit): Unit => {\n  return Math.cos(unit * HALF_PI) as Unit\n}\n","import { Unit } from '..'\nimport { toIndex } from '../number/toIndex'\n\nexport const createNearestLookup = (\n  length: number,\n  onSample: (unit: Unit) => Unit\n) => {\n  // TODO: could it be 32? or even pass the constructor in so it can be chosen from the outside :`)\n  const lookupTable = new Float64Array(length)\n\n  for (let i = 0; i < length; i++) {\n    lookupTable[i] = onSample(i / length)\n  }\n\n  return (unit: Unit) => {\n    return lookupTable[toIndex(length, unit)]\n  }\n}\n","import { Unit } from '../core/Unit'\n\nexport const cubic = (unit: Unit): Unit => {\n  return (unit * unit * unit) as Unit\n}\n","import { Unit } from '../core/Unit'\n\nexport const difference = (a: Unit, b: Unit): Unit => {\n  return Math.abs(a - b)\n}\n","import { Unit } from '../core/Unit'\n\nexport const exponential = (unit: Unit): Unit => {\n  return (unit === 0 ? 0 : Math.pow(2, 10 * unit - 10)) as Unit\n}\n","import { Unit } from '../core/Unit'\nimport { repeat } from '../2d/repeat'\nimport { subdivision } from '../number/subdivision'\nimport { toIndex } from '../number/toIndex'\n\nexport const fit = (fns: Array<(unit: Unit) => Unit>, unit: Unit): Unit => {\n  const fnsLength = fns.length\n  const t = repeat(subdivision(fnsLength), unit)\n  const fn = fns[toIndex(fnsLength, unit)]\n\n  return fn(t)\n}\n","import { Unit } from '../core/Unit'\n\nexport const fraction = (value: number): Unit => {\n  return Math.abs(value % 1) as Unit\n}\n","import { Unit } from '../core/Unit'\n\nexport const inverse = (unit: Unit): Unit => {\n  return (1 - unit) as Unit\n}\n","import { Unit } from 'core/Unit'\n\nexport const linear = (unit: Unit): Unit => {\n  return unit\n}\n","import { Unit } from '../core/Unit'\nimport { unitMin } from '../core/unitMin'\nimport { unitMax } from '../core/unitMax'\nimport { mapRange } from './mapRange'\n\nexport const mapFrom = (inMin: number, inMax: number, value: number): Unit => {\n  return mapRange(inMin, inMax, unitMin, unitMax, value)\n}\n","import { Unit } from '../core/Unit'\n\nexport const multiply = (a: Unit, b: Unit): Unit => {\n  return (a * b) as Unit\n}\n","import { wrap } from '../number/wrap'\nimport { Unit } from 'core/Unit'\n\nexport const offset = (amount: Unit, unit: Unit): Unit => {\n  return wrap(amount + unit)\n}\n","import { Unit } from '../core/Unit'\n\nexport const peak = (peak: Unit, unit: Unit): Unit => {\n  return unit < peak ? unit / peak : ((unit - peak) * -1) / (1 - peak) + 1\n}\n","import { Unit } from '../core/Unit'\n\nexport const quadratic = (unit: Unit): Unit => {\n  return (unit * unit) as Unit\n}\n","import { Unit } from '../core/Unit'\nimport { unitMax } from '../core/unitMax'\n\nexport const quantize = (fraction: Unit, value: Unit): Unit => {\n  if (fraction === 0) return value\n\n  const bands = unitMax / fraction\n\n  return Math.round(value * bands) / bands\n}\n","import { Unit } from '../core/Unit'\n\nexport const quartic = (unit: Unit): Unit => {\n  return (unit * unit * unit * unit) as Unit\n}\n","import { Unit } from '../core/Unit'\n\nexport const quintic = (unit: Unit): Unit => {\n  return (unit * unit * unit * unit * unit) as Unit\n}\n","import { distance } from './distance'\n\n// TODO: is this unit and should it be in this dir?\nexport const radial = (x: number, y: number) => {\n  return 1 - distance(x * 2 - 1, y * 2 - 1)\n}\n","import { threshold } from '../2d/threshold'\nimport { Unit } from '../core/Unit'\n\nexport const round = (unit: Unit): Unit => {\n  return threshold(0.5 as Unit, unit)\n}\n","import { Unit } from '../core/Unit'\nimport { HALF_PI } from '../constants'\n\nexport const sine = (unit: Unit): Unit => {\n  return Math.sin(unit * HALF_PI) as Unit\n}\n","import { Unit } from 'core/Unit'\n\nexport const toggle = (a: Unit, b: Unit, t: Unit): Unit => {\n  return t < 0.5 ? a : b\n}\n","import { Unit } from '../core/Unit'\n\nexport const triangle = (unit: Unit): Unit => {\n  return 1 - Math.abs(unit * 2 - 1)\n}\n"],"names":["isUnit","value","mapRange","inMin","inMax","outMin","outMax","mapTo","unit","wrap","HALF_PI","Math","PI","radiansToUnit","radians","subdivision","toIndex","length","floor","threshold","t","distance","x","y","sqrt","SQRT2","maximum","max","minimum","min","repeat","scale","mix","atan","n1","d1","a","b","abs","pow","val","cos","onSample","lookupTable","Float64Array","i","fns","fnsLength","fn","amount","peak","fraction","bands","round","sin"],"mappings":"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"}