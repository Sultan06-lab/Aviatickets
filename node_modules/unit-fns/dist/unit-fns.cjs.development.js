'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var isUnit = function isUnit(value) {
  return value >= 0 && value <= 1;
};

var unitMax = 1;

var unitMin = 0;

var clip = function clip(value) {
  return Math.max(unitMin, Math.min(unitMax, value));
};

var fraction = function fraction(value) {
  return Math.abs(value % 1);
};

var mapRange = function mapRange(inMin, inMax, outMin, outMax, value) {
  return (value - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;
};

var mapFrom = function mapFrom(inMin, inMax, value) {
  return mapRange(inMin, inMax, unitMin, unitMax, value);
};

var mapTo = function mapTo(outMin, outMax, unit) {
  return outMin * (1 - unit) + outMax * unit;
};

var wrap = function wrap(value) {
  if (isUnit(value)) return value;
  if (value % 1 === 0) return 1;
  return value < 0 ? unitMax - -value % unitMax : value % unitMax;
};

var HALF_PI = Math.PI / 2;

var radiansToUnit = function radiansToUnit(radians) {
  return wrap(radians / HALF_PI);
};

var subdivision = function subdivision(value) {
  return unitMax / value;
};

var toIndex = function toIndex(length, unit) {
  return Math.floor(unit * length);
};

var bounce = function bounce(unit) {
  var n1 = 7.5625;
  var d1 = 2.75;

  if (unit < 1 / d1) {
    return n1 * unit * unit;
  } else if (unit < 2 / d1) {
    var a = unit - 1.5 / d1;
    return n1 * a * a + 0.75;
  } else if (unit < 2.5 / d1) {
    var _a = unit - 2.25 / d1;

    return n1 * _a * _a + 0.9375;
  } else {
    var _a2 = unit - 2.625 / d1;

    return n1 * _a2 * _a2 + 0.984375;
  }
};

var center = function center(unit) {
  return Math.abs(unit * 2 - 1);
};

var circular = function circular(unit) {
  return 1 - Math.sqrt(1 - Math.pow(unit, 2));
};

var cosine = function cosine(unit) {
  return Math.cos(unit * HALF_PI);
};

var cubic = function cubic(unit) {
  return unit * unit * unit;
};

var exponential = function exponential(unit) {
  return unit === 0 ? 0 : Math.pow(2, 10 * unit - 10);
};

var inverse = function inverse(unit) {
  return 1 - unit;
};

var linear = function linear(unit) {
  return unit;
};

var quadratic = function quadratic(unit) {
  return unit * unit;
};

var quartic = function quartic(unit) {
  return unit * unit * unit * unit;
};

var quintic = function quintic(unit) {
  return unit * unit * unit * unit * unit;
};

var threshold = function threshold(_threshold, t) {
  return t < _threshold ? unitMin : unitMax;
};

var round = function round(unit) {
  return threshold(0.5, unit);
};

var sine = function sine(unit) {
  return Math.sin(unit * HALF_PI);
};

var triangle = function triangle(unit) {
  return 1 - Math.abs(unit * 2 - 1);
};

var angle = function angle(x, y) {
  return radiansToUnit(Math.atan(y / x));
};

var difference = function difference(a, b) {
  return Math.abs(a - b);
};

var distance = function distance(x, y) {
  return Math.sqrt(x * x + y * y) / Math.SQRT2;
};

var maximum = Math.max;

var minimum = Math.min;

var multiply = function multiply(a, b) {
  return a * b;
};

var offset = function offset(amount, unit) {
  return wrap(amount + unit);
};

var peak = function peak(_peak, unit) {
  return unit < _peak ? unit / _peak : (unit - _peak) * -1 / (1 - _peak) + 1;
};

var quantize = function quantize(fraction, value) {
  if (fraction === 0) return value;
  var bands = unitMax / fraction;
  return Math.round(value * bands) / bands;
};

var radial = function radial(x, y) {
  return 1 - distance(x * 2 - 1, y * 2 - 1);
};

var repeat = function repeat(scale, t) {
  var times = 1 / scale;
  return t * times % 1;
};

var clamp = function clamp(min, max, val) {
  return val > max ? max : val < min ? min : val;
};

var mix = mapTo;

var toggle = function toggle(a, b, t) {
  return t < 0.5 ? a : b;
};

var branch = function branch(a, b, unit) {
  return unit > 0.5 ? b(unit) : a(unit);
};

var createNearestLookup = function createNearestLookup(length, onSample) {
  // TODO: could it be 32? or even pass the constructor in so it can be chosen from the outside :`)
  var lookupTable = new Float64Array(length);

  for (var i = 0; i < length; i++) {
    lookupTable[i] = onSample(i / length);
  }

  return function (unit) {
    return lookupTable[toIndex(length, unit)];
  };
};

var fit = function fit(fns, unit) {
  var fnsLength = fns.length;
  var t = repeat(subdivision(fnsLength), unit);
  var fn = fns[toIndex(fnsLength, unit)];
  return fn(t);
};

exports.angle = angle;
exports.bounce = bounce;
exports.branch = branch;
exports.center = center;
exports.circular = circular;
exports.clamp = clamp;
exports.clip = clip;
exports.cosine = cosine;
exports.createNearestLookup = createNearestLookup;
exports.cubic = cubic;
exports.difference = difference;
exports.distance = distance;
exports.exponential = exponential;
exports.fit = fit;
exports.fraction = fraction;
exports.inverse = inverse;
exports.isUnit = isUnit;
exports.linear = linear;
exports.mapFrom = mapFrom;
exports.mapRange = mapRange;
exports.mapTo = mapTo;
exports.maximum = maximum;
exports.minimum = minimum;
exports.mix = mix;
exports.multiply = multiply;
exports.offset = offset;
exports.peak = peak;
exports.quadratic = quadratic;
exports.quantize = quantize;
exports.quartic = quartic;
exports.quintic = quintic;
exports.radial = radial;
exports.radiansToUnit = radiansToUnit;
exports.repeat = repeat;
exports.round = round;
exports.sine = sine;
exports.subdivision = subdivision;
exports.threshold = threshold;
exports.toIndex = toIndex;
exports.toggle = toggle;
exports.triangle = triangle;
exports.unitMax = unitMax;
exports.unitMin = unitMin;
exports.wrap = wrap;
//# sourceMappingURL=unit-fns.cjs.development.js.map
